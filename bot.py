import telebot
from datetime import date, datetime
from dateutil.relativedelta import relativedelta
from PIL import Image, ImageDraw, ImageFont
import os
import json
from flask import Flask, request
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler
import random
import time

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
BOT_TOKEN = "8312401636:AAGfQXDN5v5in2d4jUHMZZdTJYt29TfF3I8"  # <-- —Ç–≤–æ–π —Ç–æ–∫–µ–Ω
DATA_FILE = "users.json"
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)

# ---------- –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï ----------
def load_users():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_users()

# ---------- –°–û–°–¢–û–Ø–ù–ò–Ø ----------
awaiting_birth_date_change = set()  # user_id (str) ‚Äî –∂–¥—ë–º –Ω–æ–≤—É—é –¥–∞—Ç—É

# ---------- –°–ü–ò–°–û–ö –¶–ò–¢–ê–¢ ----------
quotes = [
    "–ù–∞—à–∞ –∂–∏–∑–Ω—å ‚Äî —Ü–µ–ø–æ—á–∫–∞ –¥–Ω–µ–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è.",
    "–í—Ä–µ–º—è –Ω–µ –∂–¥—ë—Ç, –Ω–æ –≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç —Ä—è–¥–æ–º.",
    "–ö–∞–∂–¥–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –µ—â—ë –æ–¥–∏–Ω —à—Ç—Ä–∏—Ö —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏.",
    "–ù–µ –ø—ã—Ç–∞–π—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è ‚Äî –Ω–∞–ø–æ–ª–Ω–∏ –µ–≥–æ —Å–º—ã—Å–ª–æ–º.",
    "–ñ–∏–∑–Ω—å –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –Ω–µ –≥–æ–¥–∞–º–∏, –∞ –º–æ–º–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å –º–µ–Ω—è—é—Ç.",
    "–°–µ–≥–æ–¥–Ω—è ‚Äî –Ω–∞—á–∞–ª–æ –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.",
    "–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è —É–∂–µ –∏—Å—Ç–æ—Ä–∏—è. –ù–æ–≤–∞—è ‚Äî –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö.",
    "–°–µ–∫—É–Ω–¥—ã –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –≥–æ–¥—ã ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏ –º–≥–Ω–æ–≤–µ–Ω–∏–µ.",
    "–ò–Ω–æ–≥–¥–∞ –≤—Ä–µ–º—è –ª–µ—Ç–∏—Ç, –∏–Ω–æ–≥–¥–∞ —Ç—è–Ω–µ—Ç—Å—è, –Ω–æ –æ–Ω–æ –≤—Å–µ–≥–¥–∞ —Ç–≤–æ—ë.",
    "–ü–æ–∫–∞ —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ, —Ç—ã —É–∂–µ –ø—Ä–æ–∂–∏–ª –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
    "–í—Å—ë –ø—Ä–æ–π–¥—ë—Ç ‚Äî –∏ —ç—Ç–æ —Ç–æ–∂–µ.",
    "–ú—ã –Ω–µ –∑–∞–º–µ—á–∞–µ–º, –∫–∞–∫ –¥–Ω–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –∂–∏–∑–Ω—å.",
    "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ ‚Äî —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
    "–¢–∏—à–∏–Ω–∞ —Ç–æ–∂–µ —Ç–µ—á—ë—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–∏.",
    "–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç, —á—Ç–æ ¬´–ø–æ—Ç–æ–º¬ª –Ω–∞—Å—Ç—É–ø–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ.",
    "–°–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ –Ω–∞ —Å–≤–µ—Ç–µ ‚Äî –≥–æ–¥—ã.",
    "–î–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç ‚Äî –∏–¥—ë—Ç –∂–∏–∑–Ω—å.",
    "–í—á–µ—Ä–∞—à–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–∏ —É–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—á–∞—Ç.",
    "–ë—É–¥—É—â–µ–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–∏—Ö–æ, —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ —á–∏—Å—Ç—ã–π –ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã —á–∞—Å—Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—à–∫–æ–π.",
]

# ---------- –ü–†–ê–ó–î–ù–ò–ß–ù–´–ï –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–Ø ----------
birthday_messages = [
    "üéâ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ü–æ–±–æ–ª—å—à–µ —Å–æ–ª–Ω—Ü–∞, —Å–≤–æ–±–æ–¥—ã –∏ –ª—é–¥–µ–π, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —Å–ø–æ–∫–æ–π–Ω–æ ‚úåÔ∏è",
    "ü•≥ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ñ–µ–ª–∞—é, —á—Ç–æ–±—ã –º—É–∑—ã–∫–∞ –∑–≤—É—á–∞–ª–∞, –∏–¥–µ–∏ —Ä–æ–∂–¥–∞–ª–∏—Å—å, –∏ –≤—Å—ë —Å–∫–ª–∞–¥—ã–≤–∞–ª–æ—Å—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ üòå",
    "üòé –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ü—É—Å—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —Å–æ–≤—Å–µ–º –Ω–µ –∂–¥—ë—à—å,\n–∞ —Ä—è–¥–æ–º –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –∑–∞—Ä—è–∂–∞–µ—Ç ‚ú®",
    "ü´∂ –ï—â—ë –æ–¥–∏–Ω –≥–æ–¥ –ø–æ–∑–∞–¥–∏ ‚Äî –Ω–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ.\n–ü—É—Å—Ç—å –≤–ø–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ —Å–≤–µ—Ç–∞, —Ç–∏—à–∏–Ω—ã –∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–µ–π üçÄ",
    "üåÖ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –ø—Ä–∏–Ω–µ—Å—ë—Ç –æ—â—É—â–µ–Ω–∏–µ, —á—Ç–æ –≤—Å—ë –∏–¥—ë—Ç –∫–∞–∫ –Ω–∞–¥–æ,\n–¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–∫–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –∫—É–¥–∞ üôÇ",
    "üéà –ü—É—Å—Ç—å –±—É–¥–µ—Ç —Å–≤–µ—Ç–ª–æ, —Å–ø–æ–∫–æ–π–Ω–æ –∏ –ø–æ-—Å–≤–æ–µ–º—É –∫—Ä–∞—Å–∏–≤–æ.\n–ê –≤—Å—ë –Ω–µ–Ω—É–∂–Ω–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–∞–ª–∏—Ç—Å—è —Å–∞–º–æ —Å–æ–±–æ–π üí´",
    "üåô –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ñ–µ–ª–∞—é —Ç–µ–±–µ –º–µ–Ω—å—à–µ —Å–ø–µ—à–∫–∏, –±–æ–ª—å—à–µ –≥–ª—É–±–∏–Ω—ã\n–∏ –ø–æ–±–æ–ª—å—à–µ —Ç–µ—Ö –≤–µ—á–µ—Ä–æ–≤, –≥–¥–µ –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ä–æ—à–æ –±—ã—Ç—å üåå",
    "üîÜ –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –Ω–∞—É—á–∏—Ç —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ—Å—Ç–æ–º—É,\n–≤–µ—Ä–∏—Ç—å –≤ —Å–≤–æ—ë –∏ –Ω–µ –∏—Å–∫–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–Ω–∞—Ä—É–∂–∏.\n–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, —á–µ–ª–æ–≤–µ–∫ —Å –æ–≥–Ω—ë–º –≤–Ω—É—Ç—Ä–∏ ‚ù§Ô∏è",
    "üéâ –ï—â—ë –æ–¥–∏–Ω –≤–∏—Ç–æ–∫ –≤–æ–∫—Ä—É–≥ —Å–æ–ª–Ω—Ü–∞ üåç\n–ü—É—Å—Ç—å –≤–ø–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Ç—ë–ø–ª—ã—Ö –Ω–µ–¥–µ–ª—å, —á–µ–º –ø–æ–∑–∞–¥–∏ ‚ú®"
]

newyear_messages = [
    "üéá –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ü—É—Å—Ç—å –≤—Å—ë –ø–ª–æ—Ö–æ–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –ø—Ä–æ—à–ª–æ–º, –∞ –≤–ø–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –º–µ—Å—Ç–æ –¥–ª—è –ª—ë–≥–∫–æ—Å—Ç–∏, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ —É—é—Ç–Ω—ã—Ö –≤–µ—á–µ—Ä–æ–≤ ‚ú®",
    "ü•Ç –° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –±—É–¥–µ—Ç –±–µ–∑ —Å—É–µ—Ç—ã ‚Äî —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ª—é–¥—å–º–∏, –≤–∫—É—Å–Ω–æ–π –µ–¥–æ–π –∏ –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ ‚ù§Ô∏è",
    "üåü –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ñ–µ–ª–∞—é, —á—Ç–æ–±—ã –º–µ—á—Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–±—ã–≤–∞–ª–∏—Å—å, –∞ —Å–∞–º–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ –¥–æ—Ä–æ–≥—É –∫ —Ç–µ–±–µ ‚úåÔ∏è",
    "üéÜ –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –±—É–¥–µ—Ç –∫–∞–∫ —Å–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö ‚Äî —á–∏—Å—Ç—ã–π, –±–æ–¥—Ä—è—â–∏–π –∏ –ø–æ–ª–Ω—ã–π –Ω–æ–≤—ã—Ö –∏–¥–µ–π. –° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! ü•Ç",
    "üåü –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ü—É—Å—Ç—å –≤ —Å–µ—Ä–¥—Ü–µ –±—É–¥–µ—Ç —Å–≤–µ—Ç–ª–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞ –æ–∫–Ω–æ–º —Ç–µ–º–Ω–æ üí´",
    "üïØ –ü—É—Å—Ç—å –≤ —ç—Ç–æ–º –≥–æ–¥—É –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Å–≤–µ—Ç–∞ –≤ –¥–æ–º–µ –∏ –≤ –¥—É—à–µ, –º–≥–Ω–æ–≤–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—Ç—Å—è –∑–∞–ø–æ–º–Ω–∏—Ç—å, –∏ –ª—é–¥–µ–π, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–ø–æ–∫–æ–π–Ω–æ üåø",
    "ü•Ç –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç —á—Ç–æ-—Ç–æ —Å–≤–æ—ë, —Å–≤–æ—é —Ä–∞–¥–æ—Å—Ç—å, —Å–≤–æ—ë –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏ –º–∞–ª–µ–Ω—å–∫—É—é –ø–æ–±–µ–¥—É üíõ",
    "üîî –° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! –ü—É—Å—Ç—å –≤ –Ω–æ–≤–æ–º –≥–æ–¥—É –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Å–º–µ—Ö–∞, —Å–≤–µ—Ç–ª—ã—Ö –∏–¥–µ–π –∏ —É—é—Ç–Ω—ã—Ö –≤–µ—á–µ—Ä–æ–≤ —Å —Ç–µ–º–∏, –∫—Ç–æ –¥–æ—Ä–æ–≥ ‚ù§Ô∏è",
    "üéá –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ñ–µ–ª–∞—é –ª—ë–≥–∫–æ—Å—Ç–∏, –ø—Ä–∏—è—Ç–Ω—ã—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤ –∏ –ª—é–¥–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç–µ–ø–ª–æ –∏ —Å–ø–æ–∫–æ–π–Ω–æ üåÖ",
    "‚ú® –ü—É—Å—Ç—å –≤ —ç—Ç–æ–º –≥–æ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç –∫–∞–∫ –º–∞–ª–µ–Ω—å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞ –∏ —Å–Ω–æ–≤–∞ üòå"
]

weekly_phrases = [
    "–ï—â—ë –æ–¥–Ω–∞ –Ω–µ–¥–µ–ª—è –ø—Ä–æ—à–ª–∞ ‚úåÔ∏è",
    "–ü—Ä–æ—à–ª–∞ –Ω–µ–¥–µ–ª—è ‚Äî –∏ —ç—Ç–æ —É–∂–µ —á—Ç–æ-—Ç–æ.",
    "–ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—á—ë—Ç: –ø—Ä–æ—à–ª–∞ –µ—â—ë –æ–¥–Ω–∞ –Ω–µ–¥–µ–ª—è —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.",
    "–ù–∞–¥—ë–∂–Ω—ã–π —á–µ–∫: –Ω–µ–¥–µ–ª—è –ø—Ä–æ—à–ª–∞ ‚Äî –≤—Ä–µ–º—è –∏–¥—ë—Ç.",
]

# ---------- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–†–¢–ò–ù–û–ö ----------
def _load_font(size):
    # –ø—Ä–æ–±—É–µ–º NotoSans, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç
    try:
        return ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", size)
    except:
        try:
            return ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", size)
        except:
            return ImageFont.load_default()

def generate_life_weeks_image(birth_date, current_date, life_expectancy_years=80):
    total_weeks = life_expectancy_years * 52
    lived_weeks = (current_date - birth_date).days // 7
    lived_days = (current_date - birth_date).days

    cols = 52
    rows = life_expectancy_years
    size = 10
    margin = 2
    left_space = 35
    top_space = 90

    img_width = cols * (size + margin) + margin + left_space + 20
    img_height = rows * (size + margin) + margin + top_space + 20
    img = Image.new("RGB", (img_width, img_height), "white")
    draw = ImageDraw.Draw(img)

    font = _load_font(14)
    title_font = _load_font(18)

    # —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–¥–Ω—è—Ç, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
    draw.text((10, 10), f"–ü—Ä–æ–∂–∏—Ç–æ: {lived_weeks} –Ω–µ–¥–µ–ª—å ({lived_days} –¥–Ω–µ–π)", fill="black", font=title_font)
    remaining_weeks = max(total_weeks - lived_weeks, 0)
    remaining_days = (birth_date + relativedelta(weeks=total_weeks) - current_date).days
    draw.text((10, 36), f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining_weeks} –Ω–µ–¥–µ–ª—å ({remaining_days} –¥–Ω–µ–π)", fill="gray", font=font)

    # –ø–æ–¥–ø–∏—Å–∏ —Å–≤–µ—Ä—Ö—É ‚Äî –ø–æ 4 –Ω–µ–¥–µ–ª–∏: 4,8,12...
    for w in range(4, cols + 1, 4):
        x_pos = left_space + (w - 1) * (size + margin)
        draw.text((x_pos, top_space - 18), str(w), fill="gray", font=font)

    # –ø–æ–¥–ø–∏—Å–∏ –ª–µ—Ç —Å–ª–µ–≤–∞ (–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ)
    for y in range(rows):
        y_pos = top_space + y * (size + margin) + (size//2 - 6)  # –Ω–µ–±–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        draw.text((10, y_pos), str(y + 1), fill="gray", font=font)

    # —Å–µ—Ç–∫–∞
    for i in range(total_weeks):
        x = left_space + (i % cols) * (size + margin)
        y = top_space + (i // cols) * (size + margin)
        color = (220, 20, 60) if i < lived_weeks else (230, 230, 230)
        draw.rectangle([x, y, x + size, y + size], fill=color)

    return img

def generate_life_months_image(birth_date, current_date, life_expectancy_years=80):
    total_months = life_expectancy_years * 12
    lived_months = (current_date.year - birth_date.year) * 12 + (current_date.month - birth_date.month)
    lived_months = max(lived_months, 0)

    cols = 12
    rows = life_expectancy_years
    size = 20
    margin = 2
    left_space = 35
    top_space = 70  # –ø–æ–¥–Ω—è—Ç–æ –¥–ª—è –Ω–∞–¥–ø–∏—Å–µ–π

    img_width = cols * (size + margin) + margin + left_space + 20
    img_height = rows * (size + margin) + margin + top_space + 20
    img = Image.new("RGB", (img_width, img_height), "white")
    draw = ImageDraw.Draw(img)

    font = _load_font(12)
    title_font = _load_font(16)

    # —Ç–µ–∫—Å—Ç
    draw.text((10, 10), f"–ü—Ä–æ–∂–∏—Ç–æ: {lived_months} –º–µ—Å—è—Ü–µ–≤", fill="black", font=title_font)
    remaining_months = max(total_months - lived_months, 0)
    draw.text((10, 32), f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining_months} –º–µ—Å—è—Ü–µ–≤", fill="gray", font=font)

    # —Ü–∏—Ñ—Ä—ã –º–µ—Å—è—Ü–µ–≤ —Å–≤–µ—Ä—Ö—É 1..12
    for m in range(1, 13):
        x_pos = left_space + (m - 1) * (size + margin)
        draw.text((x_pos + 5, top_space - 18), str(m), fill="gray", font=font)

    # —Ü–∏—Ñ—Ä—ã –ª–µ—Ç —Å–ª–µ–≤–∞
    for y in range(rows):
        y_pos = top_space + y * (size + margin) + (size//2 - 6)
        draw.text((10, y_pos), str(y + 1), fill="gray", font=font)

    # –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
    for i in range(total_months):
        x = left_space + (i % cols) * (size + margin)
        y = top_space + (i // cols) * (size + margin)
        color = (220, 20, 60) if i < lived_months else (230, 230, 230)
        draw.rectangle([x, y, x + size, y + size], fill=color)

    return img

# ---------- –ö–õ–ê–í–ò–ê–¢–£–†–ê ----------
def main_reply_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", "–ñ–∏–∑–Ω—å –≤ –º–µ—Å—è—Ü–∞—Ö", "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏")
    return markup

# ---------- START ----------
@bot.message_handler(commands=['start'])
def send_welcome(message):
    # inline –≤—ã–±–æ—Ä 70/80/90
    markup_inline = types.InlineKeyboardMarkup()
    for y in [70, 80, 90]:
        markup_inline.add(types.InlineKeyboardButton(f"{y} –ª–µ—Ç", callback_data=f"years_{y}"))
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –ø–æ –Ω–µ–¥–µ–ª—è–º.\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:",
        reply_markup=markup_inline
    )

# ---------- CALLBACK –î–õ–Ø INLINE-–ö–ù–û–ü–û–ö ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith("years_"))
def set_life_expectancy(call):
    years = int(call.data.split("_")[1])
    user_id = str(call.from_user.id)
    users.setdefault(user_id, {})
    users[user_id]["life_expectancy"] = years
    save_users(users)
    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {years} –ª–µ—Ç")

    # –µ—Å–ª–∏ –¥–∞—Ç–∞ –µ—Å—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –Ω–µ –ø—Ä–æ—Å–∏–º –¥–∞—Ç—É —Å–Ω–æ–≤–∞
    if "birth_date" in users[user_id]:
        try:
            birth_date = datetime.fromisoformat(users[user_id]["birth_date"]).date()
            img = generate_life_weeks_image(birth_date, date.today(), years)
            img.save("life.png")
            quote = random.choice(quotes)
            with open("life.png", "rb") as photo:
                bot.send_photo(call.message.chat.id, photo,
                               caption=f"{quote}\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö (–¥–æ {years} –ª–µ—Ç) üï∞",
                               reply_markup=main_reply_keyboard())
        except Exception as e:
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã.")
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ª–µ—Ç:", e)
    else:
        bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.MM.–ì–ì–ì–ì")

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ----------
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = str(message.from_user.id)
    text = (message.text or "").strip()

    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–º–µ–Ω—ã –¥–∞—Ç—ã (–º–µ–Ω—é -> –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É)
    if user_id in awaiting_birth_date_change:
        try:
            new_birth_date = datetime.strptime(text, "%d.%m.%Y").date()
            users.setdefault(user_id, {})
            users[user_id]["birth_date"] = new_birth_date.isoformat()
            # –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ last_sent_week ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–µ–∫—É—â—É—é, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –Ω–µ–¥–µ–ª–∏
            lived_weeks = (date.today() - new_birth_date).days // 7
            users[user_id].setdefault("last_sent_week", lived_weeks)
            save_users(users)
            awaiting_birth_date_change.remove(user_id)

            years = users[user_id].get("life_expectancy", 80)
            img = generate_life_weeks_image(new_birth_date, date.today(), years)
            img.save("life.png")
            quote = random.choice(quotes)
            with open("life.png", "rb") as photo:
                bot.send_photo(message.chat.id, photo,
                               caption=f"{quote}\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö (–¥–æ {years} –ª–µ—Ç) üï∞",
                               reply_markup=main_reply_keyboard())
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì")
        return

    # –ö–Ω–æ–ø–∫–∏ –≤ ReplyKeyboard:
    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è" or text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É":
        awaiting_birth_date_change.add(user_id)
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.MM.–ì–ì–ì–ì")
        return

    if text == "–ñ–∏–∑–Ω—å –≤ –º–µ—Å—è—Ü–∞—Ö" or text == "–ñ–∏–∑–Ω—å –ø–æ –º–µ—Å—è—Ü–∞–º":
        info = users.get(user_id, {})
        if "birth_date" not in info:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è'.")
            return
        birth_date = datetime.fromisoformat(info["birth_date"]).date()
        years = info.get("life_expectancy", 80)
        img = generate_life_months_image(birth_date, date.today(), years)
        img.save("life_months.png")
        quote = random.choice(quotes)
        with open("life_months.png", "rb") as photo:
            bot.send_photo(message.chat.id, photo, caption=f"{quote}\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –º–µ—Å—è—Ü–∞—Ö üìÜ")
        return

    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏" or text == "–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏":
        markup_inline = types.InlineKeyboardMarkup()
        for y in [70, 80, 90]:
            markup_inline.add(types.InlineKeyboardButton(f"{y} –ª–µ—Ç", callback_data=f"years_{y}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:", reply_markup=markup_inline)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–ª–∞–ª –¥–∞—Ç—É –≤–ø–µ—Ä–≤—ã–µ
    try:
        birth_date = datetime.strptime(text, "%d.%m.%Y").date()
        users.setdefault(user_id, {})
        users[user_id]["birth_date"] = birth_date.isoformat()
        # –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –≤–≤–æ–¥–µ ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_sent_week = —Ç–µ–∫—É—â–∏–π lived_weeks,
        # —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Å—á–∏—Ç–∞–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–¥–µ–ª–∏ –∫–∞–∫ "–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ" –∏ –Ω–µ —à–ª—ë—Ç —Å—Ä–∞–∑—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.
        lived_weeks = (date.today() - birth_date).days // 7
        users[user_id]["last_sent_week"] = lived_weeks
        years = users[user_id].get("life_expectancy", 80)
        save_users(users)

        img = generate_life_weeks_image(birth_date, date.today(), years)
        img.save("life.png")
        quote = random.choice(quotes)
        with open("life.png", "rb") as photo:
            bot.send_photo(message.chat.id, photo,
                           caption=f"{quote}\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö (–¥–æ {years} –ª–µ—Ç) üï∞",
                           reply_markup=main_reply_keyboard())
    except ValueError:
        # –Ω–µ –¥–∞—Ç–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º / –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é
        bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

# ---------- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö (–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞) ----------
def check_and_send_updates():
    today = date.today()
    print(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ø—Ä–æ–≤–µ—Ä–∫–∞ {today} ‚Äî {datetime.now().isoformat()}")
    for user_id, info in list(users.items()):
        try:
            if "birth_date" not in info:
                continue
            birth_date = datetime.fromisoformat(info["birth_date"]).date()
            years = info.get("life_expectancy", 80)

            # --- –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ---
            if birth_date.month == today.month and birth_date.day == today.day:
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ (–±–µ–∑ —Ü–∏—Ç–∞—Ç—ã)
                msg = random.choice(birthday_messages)
                try:
                    bot.send_message(int(user_id), msg)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –î–† {user_id}: {e}")
                # –Ω–µ –∏–¥—ë–º –¥–∞–ª—å—à–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º–∏)
                # *–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ—â—ë –∏ —Ç–∞–±–ª–∏—Ü—É ‚Äî –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å*
                # –û–±–Ω–æ–≤–ª—è—Ç—å last_sent_week –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                continue

            # --- –ù–æ–≤—ã–π –≥–æ–¥ (1 —è–Ω–≤–∞—Ä—è) ---
            if today.month == 1 and today.day == 1:
                msg = random.choice(newyear_messages)
                try:
                    bot.send_message(int(user_id), msg)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–ì {user_id}: {e}")
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                continue

            # --- –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–æ–≥–¥–∞ –≤—ã—Ä–æ—Å lived_weeks –±–æ–ª—å—à–µ —á–µ–º last_sent_week) ---
            lived_weeks = (today - birth_date).days // 7
            last_week = info.get("last_sent_week", None)
            if last_week is None:
                # –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ –Ω–µ–¥–µ–ª–∏
                users[user_id]["last_sent_week"] = lived_weeks
                save_users(users)
                continue

            if lived_weeks > last_week:
                # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É + —Ñ—Ä–∞–∑—É + —Ü–∏—Ç–∞—Ç–∞
                img = generate_life_weeks_image(birth_date, today, years)
                img.save("life.png")
                phrase = random.choice(weekly_phrases)
                quote = random.choice(quotes)
                caption = f"{phrase}\n\n{quote}\n\n–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞ {today.strftime('%d.%m.%Y')}"
                try:
                    with open("life.png", "rb") as photo:
                        bot.send_photo(int(user_id), photo, caption=caption)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É {user_id}: {e}")
                # –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
                users[user_id]["last_sent_week"] = lived_weeks
                save_users(users)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –¥–ª—è {user_id}: {e}")

# —Å–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler()
# –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 —Å–µ—Ä–≤–µ—Ä–∞
scheduler.add_job(check_and_send_updates, 'cron', hour=0, minute=0)
scheduler.start()

# ---------- FLASK / WEBHOOK –∏–ª–∏ POLLING ----------
app = Flask(__name__)

@app.route('/', methods=['GET'])
def home():
    return "‚úÖ Bot is running!"

# webhook receiver (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å webhook)
@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

if __name__ == "__main__":
    # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL (Render / Heroku) ‚Äî –∑–∞–¥–∞–π –µ–≥–æ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∫–∞–∫ WEBHOOK_URL
    # –ø—Ä–∏–º–µ—Ä: export WEBHOOK_URL="https://your-app.onrender.com"
    WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
    if WEBHOOK_URL:
        full_url = f"{WEBHOOK_URL.rstrip('/')}/{BOT_TOKEN}"
        try:
            bot.remove_webhook()
            bot.set_webhook(url=full_url)
            print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", full_url)
            # –ó–∞–ø—É—Å–∫–∞–µ–º Flask (webhook mode)
            port = int(os.environ.get("PORT", 8080))
            app.run(host="0.0.0.0", port=port)
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook, –ø–∞–¥–∞–µ–º –≤ polling:", e)
            bot.remove_webhook()
            print("–ó–∞–ø—É—Å–∫–∞—é polling...")
            bot.polling(none_stop=True, interval=1)
    else:
        # fallback: polling (–ª–æ–∫–∞–ª—å–Ω–æ —É–¥–æ–±–Ω–æ)
        print("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞—é polling (—É–¥–æ–±–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞).")
        bot.polling(none_stop=True, interval=1)
