import telebot
from datetime import date, datetime, timedelta
from dateutil.relativedelta import relativedelta
from PIL import Image, ImageDraw, ImageFont
import os
import json
from flask import Flask, request
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler
import random
import pytz

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
BOT_TOKEN = "8312401636:AAGfQXDN5v5in2d4jUHMZZdTJYt29TfF3I8"
DATA_FILE = "users.json"
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)
TIMEZONE = "Europe/Moscow"

# ---------- –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï ----------
def load_users():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_users()

# ---------- –°–û–°–¢–û–Ø–ù–ò–Ø ----------
awaiting_birth_date_change = set()

# ---------- –¶–ò–¢–ê–¢–´ ----------
quotes = ["–ñ–∏–∑–Ω—å –Ω–µ –∑–∞–≥–∞–¥–∫–∞, –∞ –ø—Ä–æ—Ü–µ—Å—Å.", "–ü—Ä–æ—Å—Ç–æ –∂–∏–≤–∏.", "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å —Å –Ω—É–ª—è.", "–°–µ–≥–æ–¥–Ω—è ‚Äî –Ω–∞—á–∞–ª–æ –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.", "–ù–µ —Å–ø–µ—à–∏. –£—Å–ø–µ–µ—à—å."]

# ---------- –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–Ø ----------
birthday_msgs = [
    "üéâ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ï—â—ë –æ–¥–∏–Ω –≤–∏—Ç–æ–∫ –≤–æ–∫—Ä—É–≥ —Å–æ–ª–Ω—Ü–∞ üåç –ü—É—Å—Ç—å –≤–ø–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Ç—ë–ø–ª—ã—Ö –Ω–µ–¥–µ–ª—å, —á–µ–º –ø–æ–∑–∞–¥–∏ ‚ú®",
    "ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞—é –º–Ω–æ–≥–æ —è—Ä–∫–∏—Ö –∏ —Ç—ë–ø–ª—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –≤ –∂–∏–∑–Ω–∏ ‚úåÔ∏è",
    "üéà –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ üåü"
]

new_year_msgs = [
    "üéá –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ü—É—Å—Ç—å –≤—Å—ë –ø–ª–æ—Ö–æ–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –ø—Ä–æ—à–ª–æ–º, –∞ –≤–ø–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –º–µ—Å—Ç–æ –¥–ª—è –ª—ë–≥–∫–æ—Å—Ç–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è ‚ú®",
    "ü•Ç –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –±—É–¥–µ—Ç –±–µ–∑ —Å—É–µ—Ç—ã ‚Äî —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –∏ –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ ‚ù§Ô∏è",
    "üåü –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ñ–µ–ª–∞—é, —á—Ç–æ–±—ã –º–µ—á—Ç—ã —Å–∞–º–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ –¥–æ—Ä–æ–≥—É –∫ —Ç–µ–±–µ ‚úåÔ∏è"
]

# ---------- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–†–¢–ò–ù–û–ö ----------
def generate_life_weeks_image(birth_date, current_date, life_expectancy_years=80):
    total_weeks = life_expectancy_years * 52
    lived_weeks = (current_date - birth_date).days // 7
    lived_days = (current_date - birth_date).days

    cols = 52
    rows = life_expectancy_years
    size = 10
    margin = 2
    left_space = 35
    top_space = 90

    img_width = cols * (size + margin) + margin + left_space + 20
    img_height = rows * (size + margin) + margin + top_space + 20
    img = Image.new("RGB", (img_width, img_height), "white")
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 14)
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 18)
    except:
        font = ImageFont.load_default()
        title_font = ImageFont.load_default()

    # –ø–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞–¥–ø–∏—Å–∏ –≤—ã—à–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–ª–∏—Å—å
    draw.text((10, 10), f"–ü—Ä–æ–∂–∏—Ç–æ: {lived_weeks} –Ω–µ–¥–µ–ª—å ({lived_days} –¥–Ω–µ–π)", fill="black", font=title_font)
    remaining_weeks = total_weeks - lived_weeks
    remaining_days = (birth_date + relativedelta(weeks=total_weeks) - current_date).days
    draw.text((10, 35), f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining_weeks} –Ω–µ–¥–µ–ª—å ({remaining_days} –¥–Ω–µ–π)", fill="gray", font=font)

    for w in range(4, cols + 1, 4):
        x_pos = left_space + (w - 1) * (size + margin)
        draw.text((x_pos, top_space - 18), str(w), fill="gray", font=font)

    for y in range(rows):
        y_pos = top_space + y * (size + margin) - 2
        draw.text((10, y_pos), str(y + 1), fill="gray", font=font)

    for i in range(total_weeks):
        x = left_space + (i % cols) * (size + margin)
        y = top_space + (i // cols) * (size + margin)
        color = (220, 20, 60) if i < lived_weeks else (230, 230, 230)
        draw.rectangle([x, y, x + size, y + size], fill=color)

    return img


def generate_life_months_image(birth_date, current_date, life_expectancy_years=80):
    total_months = life_expectancy_years * 12
    lived_months = (current_date.year - birth_date.year) * 12 + (current_date.month - birth_date.month)

    cols = 12
    rows = life_expectancy_years
    size = 20
    margin = 2
    left_space = 35
    top_space = 70  # –ø–æ–¥–Ω—è–ª–∏ —Ç–∞–±–ª–∏—Ü—É –≤–Ω–∏–∑, —á—Ç–æ–±—ã —Å–≤–µ—Ä—Ö—É –ø–æ–º–µ—Å—Ç–∏–ª–∏—Å—å –Ω–∞–¥–ø–∏—Å–∏

    img_width = cols * (size + margin) + margin + left_space + 20
    img_height = rows * (size + margin) + margin + top_space + 20
    img = Image.new("RGB", (img_width, img_height), "white")
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 12)
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 16)
    except:
        font = ImageFont.load_default()
        title_font = ImageFont.load_default()

    # –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤—ã—à–µ
    draw.text((10, 10), f"–ü—Ä–æ–∂–∏—Ç–æ: {lived_months} –º–µ—Å—è—Ü–µ–≤", fill="black", font=title_font)
    remaining_months = total_months - lived_months
    draw.text((10, 30), f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining_months} –º–µ—Å—è—Ü–µ–≤", fill="gray", font=font)

    # —Ü–∏—Ñ—Ä—ã –º–µ—Å—è—Ü–µ–≤ —Å–≤–µ—Ä—Ö—É
    for m in range(1, 13):
        x_pos = left_space + (m - 1) * (size + margin)
        draw.text((x_pos + 5, top_space - 18), str(m), fill="gray", font=font)

    # —Ü–∏—Ñ—Ä—ã –ª–µ—Ç —Å–ª–µ–≤–∞
    for y in range(rows):
        y_pos = top_space + y * (size + margin) - 2
        draw.text((10, y_pos), str(y + 1), fill="gray", font=font)

    # –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
    for i in range(total_months):
        x = left_space + (i % cols) * (size + margin)
        y = top_space + (i // cols) * (size + margin)
        color = (220, 20, 60) if i < lived_months else (230, 230, 230)
        draw.rectangle([x, y, x + size, y + size], fill=color)

    return img

# ---------- –ö–õ–ê–í–ò–ê–¢–£–†–ê ----------
def main_reply_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–∏–∑–Ω—å –ø–æ –º–µ—Å—è—Ü–∞–º", "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏")
    return markup

# ---------- –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò ----------
def send_life_image(user_id, include_quote=True):
    info = users.get(str(user_id), {})
    if "birth_date" not in info:
        return

    birth_date = datetime.fromisoformat(info["birth_date"]).date()
    years = info.get("life_expectancy", 80)
    img = generate_life_weeks_image(birth_date, date.today(), years)
    img.save("life.png")
    caption = ""
    if include_quote:
        caption = random.choice(quotes)
        caption += f"\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö (–¥–æ {years} –ª–µ—Ç) üï∞"

    else:
        caption = f"–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö (–¥–æ {years} –ª–µ—Ç) üï∞"

    with open("life.png", "rb") as photo:
        bot.send_photo(user_id, photo, caption=caption, reply_markup=main_reply_keyboard())

def send_birthday(user_id):
    msg = random.choice(birthday_msgs)
    send_life_image(user_id, include_quote=False)
    bot.send_message(user_id, msg)

def send_new_year(user_id):
    msg = random.choice(new_year_msgs)
    send_life_image(user_id, include_quote=False)
    bot.send_message(user_id, msg)

# ---------- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ----------
scheduler = BackgroundScheduler(timezone=TIMEZONE)

def daily_check():
    today = datetime.now(pytz.timezone(TIMEZONE)).date()
    for user_id_str, info in users.items():
        user_id = int(user_id_str)
        birth_date = datetime.fromisoformat(info.get("birth_date")).date()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –î–†
        if birth_date.day == today.day and birth_date.month == today.month:
            send_birthday(user_id)
        else:
            # –í –æ–±—ã—á–Ω—ã–µ –¥–Ω–∏ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ü–∏—Ç–∞—Ç–æ–π
            send_life_image(user_id, include_quote=True)

def new_year_check():
    today = datetime.now(pytz.timezone(TIMEZONE))
    if today.month == 1 and today.day == 1 and today.hour == 0:
        for user_id_str in users.keys():
            user_id = int(user_id_str)
            send_new_year(user_id)

scheduler.add_job(daily_check, "cron", hour=10, minute=0)  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
scheduler.add_job(new_year_check, "cron", month=1, day=1, hour=0, minute=0)  # 1 —è–Ω–≤–∞—Ä—è 00:00
scheduler.start()

# ---------- START, CALLBACK, MESSAGE HANDLER ----------
# (–¢—É—Ç –≤—Å—Ç–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–≤–æ–π –∫–æ–¥ –¥–ª—è /start, callback_query_handler –∏ handle_message –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# ---------- FLASK ----------
app = Flask(__name__)

@app.route('/', methods=['GET'])
def home():
    return "‚úÖ Bot is running!"

@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

if __name__ == "__main__":
    WEBHOOK_URL = f"https://lifetimerbot.onrender.com/{BOT_TOKEN}"
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)

    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
