import telebot
from datetime import date, datetime
from dateutil.relativedelta import relativedelta
from PIL import Image, ImageDraw, ImageFont
import os
import json
import random
from telebot import types

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
BOT_TOKEN = "8312401636:AAGfQXDN5v5in2d4jUHMZZdTJYt29TfF3I8"
DATA_FILE = "users.json"
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)

# ---------- –°–ü–ò–°–û–ö –¶–ò–¢–ê–¢ ----------
quotes = [
    "–ù–∞—à–∞ –∂–∏–∑–Ω—å ‚Äî —Ü–µ–ø–æ—á–∫–∞ –¥–Ω–µ–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è.",
    "–í—Ä–µ–º—è –Ω–µ –∂–¥—ë—Ç, –Ω–æ –≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç —Ä—è–¥–æ–º.",
    "–ö–∞–∂–¥–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –µ—â—ë –æ–¥–∏–Ω —à—Ç—Ä–∏—Ö —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏.",
    "–ù–µ –ø—ã—Ç–∞–π—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è ‚Äî –Ω–∞–ø–æ–ª–Ω–∏ –µ–≥–æ —Å–º—ã—Å–ª–æ–º.",
    "–ñ–∏–∑–Ω—å –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –Ω–µ –≥–æ–¥–∞–º–∏, –∞ –º–æ–º–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å –º–µ–Ω—è—é—Ç.",
    "–°–µ–≥–æ–¥–Ω—è ‚Äî –Ω–∞—á–∞–ª–æ –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.",
    "–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è —É–∂–µ –∏—Å—Ç–æ—Ä–∏—è. –ù–æ–≤–∞—è ‚Äî –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö.",
    "–°–µ–∫—É–Ω–¥—ã –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –≥–æ–¥—ã ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏ –º–≥–Ω–æ–≤–µ–Ω–∏–µ.",
    "–ò–Ω–æ–≥–¥–∞ –≤—Ä–µ–º—è –ª–µ—Ç–∏—Ç, –∏–Ω–æ–≥–¥–∞ —Ç—è–Ω–µ—Ç—Å—è, –Ω–æ –æ–Ω–æ –≤—Å–µ–≥–¥–∞ —Ç–≤–æ—ë.",
    "–ü–æ–∫–∞ —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ, —Ç—ã —É–∂–µ –ø—Ä–æ–∂–∏–ª –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
]

# ---------- –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï ----------
def load_users():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_users()

# ---------- –°–û–°–¢–û–Ø–ù–ò–Ø ----------
awaiting_birth_date_change = set()  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è—é—Ç –¥–∞—Ç—É

# ---------- –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –ü–û –ù–ï–î–ï–õ–Ø–ú ----------
def generate_life_weeks_image(birth_date, current_date, life_expectancy_years=80):
    total_weeks = life_expectancy_years * 52
    lived_weeks = (current_date - birth_date).days // 7
    lived_days = (current_date - birth_date).days
    remaining_days = (birth_date + relativedelta(years=life_expectancy_years) - current_date).days

    cols = 52
    rows = life_expectancy_years
    size = 10
    margin = 2
    left_space = 35
    top_space = 90

    img_width = cols * (size + margin) + margin + left_space + 20
    img_height = rows * (size + margin) + margin + top_space + 20
    img = Image.new("RGB", (img_width, img_height), "white")
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 14)
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 18)
    except:
        font = ImageFont.load_default()
        title_font = ImageFont.load_default()

    draw.text((10, 10), f"–ü—Ä–æ–∂–∏—Ç–æ: {lived_weeks} –Ω–µ–¥–µ–ª—å ({lived_days} –¥–Ω–µ–π)", fill="black", font=title_font)
    draw.text((10, 40), f"–û—Å—Ç–∞–ª–æ—Å—å: {total_weeks - lived_weeks} –Ω–µ–¥–µ–ª—å ({remaining_days} –¥–Ω–µ–π)", fill="gray", font=font)

    for w in range(4, cols + 1, 4):
        x_pos = left_space + (w - 1) * (size + margin)
        draw.text((x_pos, top_space - 18), str(w), fill="gray", font=font)

    for y in range(rows):
        y_pos = top_space + y * (size + margin) - 2
        draw.text((10, y_pos), str(y + 1), fill="gray", font=font)

    for i in range(total_weeks):
        x = left_space + (i % cols) * (size + margin)
        y = top_space + (i // cols) * (size + margin)
        color = (220, 20, 60) if i < lived_weeks else (230, 230, 230)
        draw.rectangle([x, y, x + size, y + size], fill=color)

    return img

# ---------- –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –ü–û –ú–ï–°–Ø–¶–ê–ú ----------
def generate_life_months_image(birth_date, current_date, life_expectancy_years=80):
    total_months = life_expectancy_years * 12
    lived_months = relativedelta(current_date, birth_date).years * 12 + relativedelta(current_date, birth_date).months
    remaining_months = total_months - lived_months

    cols = 12
    rows = life_expectancy_years
    size = 15
    margin = 2
    left_space = 35
    top_space = 90

    img_width = cols * (size + margin) + margin + left_space + 20
    img_height = rows * (size + margin) + margin + top_space + 20
    img = Image.new("RGB", (img_width, img_height), "white")
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 14)
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 18)
    except:
        font = ImageFont.load_default()
        title_font = ImageFont.load_default()

    draw.text((10, 10), f"–ü—Ä–æ–∂–∏—Ç–æ: {lived_months} –º–µ—Å—è—Ü–µ–≤", fill="black", font=title_font)
    draw.text((10, 40), f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining_months} –º–µ—Å—è—Ü–µ–≤", fill="gray", font=font)

    for y in range(rows):
        y_pos = top_space + y * (size + margin) - 2
        draw.text((10, y_pos), str(y + 1), fill="gray", font=font)

    for i in range(total_months):
        x = left_space + (i % cols) * (size + margin)
        y = top_space + (i // cols) * (size + margin)
        color = (220, 20, 60) if i < lived_months else (230, 230, 230)
        draw.rectangle([x, y, x + size, y + size], fill=color)

    return img

# ---------- –ú–ï–ù–Æ –ò –°–¢–ê–†–¢ ----------
def main_reply_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–∏–∑–Ω—å –ø–æ –º–µ—Å—è—Ü–∞–º", "–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏")
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup_inline = types.InlineKeyboardMarkup()
    for years in [70, 80, 90]:
        markup_inline.add(types.InlineKeyboardButton(f"{years} –ª–µ—Ç", callback_data=f"years_{years}"))

    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –ø–æ –Ω–µ–¥–µ–ª—è–º.\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:",
        reply_markup=markup_inline
    )

# ---------- –£–°–¢–ê–ù–û–í–ö–ê –ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ñ–ò–ó–ù–ò ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith("years_"))
def set_life_expectancy(call):
    years = int(call.data.split("_")[1])
    user_id = str(call.from_user.id)
    if user_id not in users:
        users[user_id] = {}
    users[user_id]["life_expectancy"] = years
    save_users(users)
    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {years} –ª–µ—Ç")
    bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.MM.–ì–ì–ì–ì")

# ---------- –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–¢–´ ----------
@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
def change_birth_date_request(message):
    user_id = str(message.from_user.id)
    awaiting_birth_date_change.add(user_id)
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.MM.–ì–ì–ì–ì")

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–∏–∑–Ω—å –ø–æ –º–µ—Å—è—Ü–∞–º")
def show_life_months(message):
    user_id = str(message.from_user.id)
    if user_id not in users or "birth_date" not in users[user_id]:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!")
        return
    birth_date = date.fromisoformat(users[user_id]["birth_date"])
    years = users[user_id].get("life_expectancy", 80)
    img = generate_life_months_image(birth_date, date.today(), years)
    img.save("life_months.png")
    with open("life_months.png", "rb") as photo:
        bot.send_photo(message.chat.id, photo, caption=f"–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –ø–æ –º–µ—Å—è—Ü–∞–º –¥–æ {years} –ª–µ—Ç üï∞")

@bot.message_handler(func=lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏")
def change_life_expectancy_request(message):
    markup_inline = types.InlineKeyboardMarkup()
    for years in [70, 80, 90]:
        markup_inline.add(types.InlineKeyboardButton(f"{years} –ª–µ—Ç", callback_data=f"years_{years}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:", reply_markup=markup_inline)

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–¢–´ ----------
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = str(message.from_user.id)
    if user_id in awaiting_birth_date_change:
        try:
            new_birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
            if user_id not in users:
                users[user_id] = {}
            users[user_id]["birth_date"] = new_birth_date.isoformat()
            save_users(users)
            awaiting_birth_date_change.remove(user_id)

            years = users[user_id].get("life_expectancy", 80)
            img = generate_life_weeks_image(new_birth_date, date.today(), years)
            img.save("life.png")
            quote = random.choice(quotes)
            with open("life.png", "rb") as photo:
                bot.send_photo(message.chat.id, photo, caption=f"{quote}\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö (—Ä–∞—Å—á—ë—Ç –¥–æ {years} –ª–µ—Ç) üï∞", reply_markup=main_reply_keyboard())
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì")

# ---------- –ó–ê–ü–£–°–ö –ë–û–¢–ê ----------
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úåÔ∏è")
bot.infinity_polling()
