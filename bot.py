import telebot
from datetime import date, timedelta, datetime
from PIL import Image, ImageDraw, ImageFont
import os
import json
from flask import Flask, request
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
BOT_TOKEN = "8312401636:AAGfQXDN5v5in2d4jUHMZZdTJYt29TfF3I8"
DATA_FILE = "users.json"
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)

# ---------- –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ----------
def load_users():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_users()

# ---------- –°–û–ó–î–ê–ù–ò–ï –ö–ê–†–¢–ò–ù–ö–ò ----------
def generate_life_weeks_image(birth_date, current_date, life_expectancy_years=80):
    total_weeks = life_expectancy_years * 52
    lived_weeks = (current_date - birth_date).days // 7
    lived_days = (current_date - birth_date).days
    remaining_weeks = total_weeks - lived_weeks
    remaining_days = remaining_weeks * 7

    cols = 52
    rows = life_expectancy_years
    size = 10
    margin = 2
    left_space = 35
    top_space = 90

    img_width = cols * (size + margin) + margin + left_space + 20
    img_height = rows * (size + margin) + margin + top_space + 20
    img = Image.new("RGB", (img_width, img_height), "white")
    draw = ImageDraw.Draw(img)

    # –®—Ä–∏—Ñ—Ç
    try:
        font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 14)
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 18)
    except:
        font = ImageFont.load_default()
        title_font = ImageFont.load_default()

    # –¢–µ–∫—Å—Ç —Å–≤–µ—Ä—Ö—É
    draw.text((10, 10), f"–ü—Ä–æ–∂–∏—Ç–æ: {lived_weeks} –Ω–µ–¥–µ–ª—å ({lived_days} –¥–Ω–µ–π)", fill="black", font=title_font)
    draw.text((10, 40), f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining_weeks} –Ω–µ–¥–µ–ª—å ({remaining_days} –¥–Ω–µ–π)", fill="gray", font=font)

    # –ü–æ–¥–ø–∏—Å–∏ –Ω–µ–¥–µ–ª—å —Å–≤–µ—Ä—Ö—É (4, 8, 12, ...)
    for w in range(4, cols + 1, 4):
        x_pos = left_space + (w - 1) * (size + margin)
        draw.text((x_pos, top_space - 18), str(w), fill="gray", font=font)

    # –ü–æ–¥–ø–∏—Å–∏ –ª–µ—Ç —Å–ª–µ–≤–∞
    for y in range(rows):
        y_pos = top_space + y * (size + margin) - 5
        draw.text((10, y_pos), str(y + 1), fill="gray", font=font)

    # –°–µ—Ç–∫–∞
    for i in range(total_weeks):
        x = left_space + (i % cols) * (size + margin)
        y = top_space + (i // cols) * (size + margin)
        color = (220, 20, 60) if i < lived_weeks else (230, 230, 230)
        draw.rectangle([x, y, x + size, y + size], fill=color)

    return img

# ---------- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ----------
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    for years in [70, 80, 90]:
        markup.add(types.InlineKeyboardButton(f"{years} –ª–µ—Ç", callback_data=f"years_{years}"))
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –ø–æ –Ω–µ–¥–µ–ª—è–º.\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("years_"))
def set_life_expectancy(call):
    years = int(call.data.split("_")[1])
    user_id = str(call.from_user.id)
    if user_id not in users:
        users[user_id] = {}
    users[user_id]["life_expectancy"] = years
    save_users(users)
    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {years} –ª–µ—Ç")
    bot.send_message(call.message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì")

@bot.message_handler(func=lambda message: True)
def send_life_image(message):
    user_id = str(message.from_user.id)
    try:
        birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        current_date = date.today()
        years = users.get(user_id, {}).get("life_expectancy", 80)

        users[user_id]["birth_date"] = birth_date.isoformat()
        save_users(users)

        img = generate_life_weeks_image(birth_date, current_date, years)
        img.save("life.png")
        with open("life.png", "rb") as photo:
            bot.send_photo(message.chat.id, photo, caption=f"–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –¥–æ {years} –ª–µ—Ç üï∞")

    except ValueError:
        bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

# ---------- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ) ----------
def send_weekly_updates():
    today = date.today()
    for user_id, info in users.items():
        try:
            if "birth_date" in info:
                birth_date = date.fromisoformat(info["birth_date"])
                years = info.get("life_expectancy", 80)
                img = generate_life_weeks_image(birth_date, today, years)
                img.save("life.png")
                with open("life.png", "rb") as photo:
                    bot.send_photo(user_id, photo, caption=f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞ {today.strftime('%d.%m.%Y')} ‚ú®")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª—è {user_id}: {e}")

scheduler = BackgroundScheduler()
scheduler.add_job(send_weekly_updates, 'cron', day_of_week='mon', hour=10, minute=0)
scheduler.start()

# ---------- FLASK ----------
app = Flask(__name__)

@app.route('/', methods=['GET'])
def home():
    return "‚úÖ Bot is running and Flask server is alive!"

@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

if __name__ == "__main__":
    WEBHOOK_URL = f"https://lifetimerbot.onrender.com/{BOT_TOKEN}"
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)

    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
