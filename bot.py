import telebot
from datetime import date, datetime
from dateutil.relativedelta import relativedelta
from PIL import Image, ImageDraw, ImageFont
import os
import json
from flask import Flask, request
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler
import random
import pytz

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
BOT_TOKEN = "8312401636:AAGfQXDN5v5in2d4jUHMZZdTJYt29TfF3I8"
DATA_FILE = "users.json"
TIMEZONE = "Europe/Moscow"  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è APScheduler
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)

# ---------- –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï ----------
def load_users():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_users()

# ---------- –°–û–°–¢–û–Ø–ù–ò–Ø ----------
awaiting_birth_date_change = set()

# ---------- –¶–ò–¢–ê–¢–´ ----------
quotes = [
    "–ñ–∏–∑–Ω—å –Ω–µ –∑–∞–≥–∞–¥–∫–∞, –∞ –ø—Ä–æ—Ü–µ—Å—Å.",
    "–ü—Ä–æ—Å—Ç–æ –∂–∏–≤–∏.",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å —Å –Ω—É–ª—è.",
    "–°–µ–≥–æ–¥–Ω—è ‚Äî –Ω–∞—á–∞–ª–æ –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.",
    "–ù–µ —Å–ø–µ—à–∏. –£—Å–ø–µ–µ—à—å."
]

# ---------- –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–Ø ----------
birthday_messages = [
    "üéâ –° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–¥–æ—Å—Ç—å ‚úåÔ∏è",
    "ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –î–†! –ñ–µ–ª–∞—é –±–æ–ª—å—à–∏—Ö –ø–æ–±–µ–¥ –∏ –º–∞–ª–µ–Ω—å–∫–∏—Ö —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–π üéÅ",
    "‚ú® –° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç –∫–∞–∫ –ø–æ–¥–∞—Ä–æ–∫"
]

new_year_messages = [
    "üéá –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ü—É—Å—Ç—å –≤—Å—ë –ø–ª–æ—Ö–æ–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –ø—Ä–æ—à–ª–æ–º, –∞ –≤–ø–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –º–µ—Å—Ç–æ –¥–ª—è –ª—ë–≥–∫–æ—Å—Ç–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è ‚ú®",
    "ü•Ç –° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –±—É–¥–µ—Ç –±–µ–∑ —Å—É–µ—Ç—ã ‚Äî —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –∏ –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ ‚ù§Ô∏è",
    "üåü –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ñ–µ–ª–∞—é, —á—Ç–æ–±—ã –º–µ—á—Ç—ã —Å–∞–º–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ –¥–æ—Ä–æ–≥—É –∫ —Ç–µ–±–µ ‚úåÔ∏è"
]

# ---------- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–†–¢–ò–ù–û–ö ----------
def generate_life_weeks_image(birth_date, current_date, life_expectancy_years=80):
    total_weeks = life_expectancy_years * 52
    lived_weeks = (current_date - birth_date).days // 7
    lived_days = (current_date - birth_date).days

    cols = 52
    rows = life_expectancy_years
    size = 10
    margin = 2
    left_space = 35
    top_space = 90

    img_width = cols * (size + margin) + margin + left_space + 20
    img_height = rows * (size + margin) + margin + top_space + 20
    img = Image.new("RGB", (img_width, img_height), "white")
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 14)
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 18)
    except:
        font = ImageFont.load_default()
        title_font = ImageFont.load_default()

    draw.text((10, 10), f"–ü—Ä–æ–∂–∏—Ç–æ: {lived_weeks} –Ω–µ–¥–µ–ª—å ({lived_days} –¥–Ω–µ–π)", fill="black", font=title_font)
    remaining_weeks = total_weeks - lived_weeks
    remaining_days = (birth_date + relativedelta(weeks=total_weeks) - current_date).days
    draw.text((10, 35), f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining_weeks} –Ω–µ–¥–µ–ª—å ({remaining_days} –¥–Ω–µ–π)", fill="gray", font=font)

    for w in range(4, cols + 1, 4):
        x_pos = left_space + (w - 1) * (size + margin)
        draw.text((x_pos, top_space - 18), str(w), fill="gray", font=font)

    for y in range(rows):
        y_pos = top_space + y * (size + margin) - 2
        draw.text((10, y_pos), str(y + 1), fill="gray", font=font)

    for i in range(total_weeks):
        x = left_space + (i % cols) * (size + margin)
        y = top_space + (i // cols) * (size + margin)
        color = (220, 20, 60) if i < lived_weeks else (230, 230, 230)
        draw.rectangle([x, y, x + size, y + size], fill=color)

    return img

def generate_life_months_image(birth_date, current_date, life_expectancy_years=80):
    total_months = life_expectancy_years * 12
    lived_months = (current_date.year - birth_date.year) * 12 + (current_date.month - birth_date.month)

    cols = 12
    rows = life_expectancy_years
    size = 20
    margin = 2
    left_space = 35
    top_space = 70

    img_width = cols * (size + margin) + margin + left_space + 20
    img_height = rows * (size + margin) + margin + top_space + 20
    img = Image.new("RGB", (img_width, img_height), "white")
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 12)
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 16)
    except:
        font = ImageFont.load_default()
        title_font = ImageFont.load_default()

    draw.text((10, 10), f"–ü—Ä–æ–∂–∏—Ç–æ: {lived_months} –º–µ—Å—è—Ü–µ–≤", fill="black", font=title_font)
    remaining_months = total_months - lived_months
    draw.text((10, 30), f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining_months} –º–µ—Å—è—Ü–µ–≤", fill="gray", font=font)

    for m in range(1, 13):
        x_pos = left_space + (m - 1) * (size + margin)
        draw.text((x_pos + 5, top_space - 18), str(m), fill="gray", font=font)

    for y in range(rows):
        y_pos = top_space + y * (size + margin) - 2
        draw.text((10, y_pos), str(y + 1), fill="gray", font=font)

    for i in range(total_months):
        x = left_space + (i % cols) * (size + margin)
        y = top_space + (i // cols) * (size + margin)
        color = (220, 20, 60) if i < lived_months else (230, 230, 230)
        draw.rectangle([x, y, x + size, y + size], fill=color)

    return img

# ---------- –ö–õ–ê–í–ò–ê–¢–£–†–ê ----------
def main_reply_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–∏–∑–Ω—å –ø–æ –º–µ—Å—è—Ü–∞–º", "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏")
    return markup

# ---------- START ----------
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup_inline = types.InlineKeyboardMarkup()
    for y in [70, 80, 90]:
        markup_inline.add(types.InlineKeyboardButton(f"{y} –ª–µ—Ç", callback_data=f"years_{y}"))
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –ø–æ –Ω–µ–¥–µ–ª—è–º.\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:",
        reply_markup=markup_inline
    )

# ---------- CALLBACK ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith("years_"))
def set_life_expectancy(call):
    years = int(call.data.split("_")[1])
    user_id = str(call.from_user.id)

    users.setdefault(user_id, {})
    users[user_id]["life_expectancy"] = years
    save_users(users)

    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {years} –ª–µ—Ç")

    if "birth_date" in users[user_id]:
        birth_date = datetime.fromisoformat(users[user_id]["birth_date"]).date()
        img = generate_life_weeks_image(birth_date, date.today(), years)
        img.save("life.png")
        quote = random.choice(quotes)
        with open("life.png", "rb") as photo:
            bot.send_photo(call.message.chat.id, photo,
                           caption=f"{quote}\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö (–¥–æ {years} –ª–µ—Ç) üï∞",
                           reply_markup=main_reply_keyboard())
    else:
        bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.MM.–ì–ì–ì–ì")

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô (–î–†–£–ñ–ï–õ–Æ–ë–ù–ê–Ø) ----------
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = str(message.from_user.id)
    text = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç –¥–∞—Ç—É
    if user_id in awaiting_birth_date_change:
        try:
            new_birth_date = datetime.strptime(text, "%d.%m.%Y").date()
            users.setdefault(user_id, {})
            users[user_id]["birth_date"] = new_birth_date.isoformat()
            save_users(users)
            awaiting_birth_date_change.remove(user_id)

            years = users[user_id].get("life_expectancy", 80)
            img = generate_life_weeks_image(new_birth_date, date.today(), years)
            img.save("life.png")
            quote = random.choice(quotes)
            with open("life.png", "rb") as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption=f"{quote}\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö (–¥–æ {years} –ª–µ—Ç) üï∞",
                    reply_markup=main_reply_keyboard()
                )
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è":
        awaiting_birth_date_change.add(user_id)
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.MM.–ì–ì–ì–ì")
    elif text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–∏–∑–Ω—å –ø–æ –º–µ—Å—è—Ü–∞–º":
        info = users.get(user_id, {})
        if "birth_date" not in info:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è'.")
            return
        birth_date = datetime.fromisoformat(info["birth_date"]).date()
        years = info.get("life_expectancy", 80)
        img = generate_life_months_image(birth_date, date.today(), years)
        img.save("life_months.png")
        quote = random.choice(quotes)
        with open("life_months.png", "rb") as photo:
            bot.send_photo(message.chat.id, photo,
                           caption=f"{quote}\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –ø–æ –º–µ—Å—è—Ü–∞–º üìÜ")
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏":
        markup_inline = types.InlineKeyboardMarkup()
        for y in [70, 80, 90]:
            markup_inline.add(types.InlineKeyboardButton(f"{y} –ª–µ—Ç", callback_data=f"years_{y}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:", reply_markup=markup_inline)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç —ç—Ç–æ –¥–∞—Ç–∞
        try:
            birth_date = datetime.strptime(text, "%d.%m.%Y").date()
            users.setdefault(user_id, {})
            users[user_id]["birth_date"] = birth_date.isoformat()
            years = users[user_id].get("life_expectancy", 80)
            save_users(users)
            img = generate_life_weeks_image(birth_date, date.today(), years)
            img.save("life.png")
            quote = random.choice(quotes)
            with open("life.png", "rb") as photo:
                bot.send_photo(message.chat.id, photo,
                               caption=f"{quote}\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö (–¥–æ {years} –ª–µ—Ç) üï∞",
                               reply_markup=main_reply_keyboard())
        except ValueError:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–∞—Ç–∞ –∏ –Ω–µ –∫–Ω–æ–ø–∫–∞ ‚Äî –æ–¥–∏–Ω —Ä–∞–∑ –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            bot.send_message(message.chat.id,
                             "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏")



# ---------- FLASK ----------
app = Flask(__name__)

@app.route('/', methods=['GET'])
def home():
    return "‚úÖ Bot is running!"

@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200

# ---------- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ----------
scheduler = BackgroundScheduler(timezone=pytz.timezone(TIMEZONE))

def daily_update():
    today = date.today()
    for user_id, info in users.items():
        if "birth_date" not in info:
            continue
        birth_date = datetime.fromisoformat(info["birth_date"]).date()
        years = info.get("life_expectancy", 80)

        img = generate_life_weeks_image(birth_date, today, years)
        filename = f"life_{user_id}.png"
        img.save(filename)

        # –î–†
        if birth_date.day == today.day and birth_date.month == today.month:
            message = random.choice(birthday_messages)
            with open(filename, "rb") as photo:
                bot.send_photo(user_id, photo, caption=message)

        # –ù–æ–≤—ã–π –≥–æ–¥
        if today.month == 1 and today.day == 1:
            message = random.choice(new_year_messages)
            with open(filename, "rb") as photo:
                bot.send_photo(user_id, photo, caption=message)

scheduler.add_job(daily_update, 'cron', hour=9, minute=0)  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
scheduler.start()

# ---------- –í–ï–ë–•–£–ö –ù–ê RENDER ----------
bot.remove_webhook()
WEBHOOK_URL = "https://lifetimerbot.onrender.com/8312401636:AAGfQXDN5v5in2d4jUHMZZdTJYt29TfF3I8"
bot.set_webhook(url=WEBHOOK_URL)


# ---------- –ó–ê–ü–£–°–ö FLASK ----------
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
