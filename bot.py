import telebot
from datetime import date, datetime, timedelta
from dateutil.relativedelta import relativedelta
from PIL import Image, ImageDraw, ImageFont
import os
import json
from flask import Flask, request
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler
import random

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
BOT_TOKEN = "8312401636:AAGfQXDN5v5in2d4jUHMZZdTJYt29TfF3I8"
DATA_FILE = "users.json"
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)

# ---------- –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï ----------
def load_users():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_users()

# ---------- –°–û–°–¢–û–Ø–ù–ò–Ø ----------
awaiting_birth_date_change = set()

# ---------- –¶–ò–¢–ê–¢–´ ----------
quotes = [
    "–ñ–∏–∑–Ω—å –Ω–µ –∑–∞–≥–∞–¥–∫–∞, –∞ –ø—Ä–æ—Ü–µ—Å—Å.",
    "–ü—Ä–æ—Å—Ç–æ –∂–∏–≤–∏.",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å —Å –Ω—É–ª—è.",
    "–°–µ–≥–æ–¥–Ω—è ‚Äî –Ω–∞—á–∞–ª–æ –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.",
    "–ù–µ —Å–ø–µ—à–∏. –£—Å–ø–µ–µ—à—å."
]

# ---------- –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–Ø ----------
birthday_wishes = [
    "üéâ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ü–æ–±–æ–ª—å—à–µ —Å–æ–ª–Ω—Ü–∞, —Å–≤–æ–±–æ–¥—ã –∏ –ª—é–¥–µ–π, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —Å–ø–æ–∫–æ–π–Ω–æ ‚úåÔ∏è",
    "ü•≥ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ñ–µ–ª–∞—é, —á—Ç–æ–±—ã –º—É–∑—ã–∫–∞ –∑–≤—É—á–∞–ª–∞, –∏–¥–µ–∏ —Ä–æ–∂–¥–∞–ª–∏—Å—å, –∏ –≤—Å—ë —Å–∫–ª–∞–¥—ã–≤–∞–ª–æ—Å—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ üòå",
    "üòé –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ü—É—Å—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —Å–æ–≤—Å–µ–º –Ω–µ –∂–¥—ë—à—å, –∞ —Ä—è–¥–æ–º –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –∑–∞—Ä—è–∂–∞–µ—Ç ‚ú®",
    "ü´∂ –ï—â—ë –æ–¥–∏–Ω –≥–æ–¥ –ø–æ–∑–∞–¥–∏ ‚Äî –Ω–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ.\n–ü—É—Å—Ç—å –≤–ø–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ —Å–≤–µ—Ç–∞, —Ç–∏—à–∏–Ω—ã –∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–µ–π üçÄ",
    "üåÖ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –ø—Ä–∏–Ω–µ—Å—ë—Ç –æ—â—É—â–µ–Ω–∏–µ, —á—Ç–æ –≤—Å—ë –∏–¥—ë—Ç –∫–∞–∫ –Ω–∞–¥–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–∫–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –∫—É–¥–∞ üôÇ",
    "üéà –ü—É—Å—Ç—å –±—É–¥–µ—Ç —Å–≤–µ—Ç–ª–æ, —Å–ø–æ–∫–æ–π–Ω–æ –∏ –ø–æ-—Å–≤–æ–µ–º—É –∫—Ä–∞—Å–∏–≤–æ.\n–ê –≤—Å—ë –Ω–µ–Ω—É–∂–Ω–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–∞–ª–∏—Ç—Å—è —Å–∞–º–æ —Å–æ–±–æ–π üí´",
    "üåô –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ñ–µ–ª–∞—é —Ç–µ–±–µ –º–µ–Ω—å—à–µ —Å–ø–µ—à–∫–∏, –±–æ–ª—å—à–µ –≥–ª—É–±–∏–Ω—ã –∏ –ø–æ–±–æ–ª—å—à–µ —Ç–µ—Ö –≤–µ—á–µ—Ä–æ–≤, –≥–¥–µ –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ä–æ—à–æ –±—ã—Ç—å üåå",
    "üîÜ –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –Ω–∞—É—á–∏—Ç —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ—Å—Ç–æ–º—É, –≤–µ—Ä–∏—Ç—å –≤ —Å–≤–æ—ë –∏ –Ω–µ –∏—Å–∫–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–Ω–∞—Ä—É–∂–∏.\n–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, —á–µ–ª–æ–≤–µ–∫ —Å –æ–≥–Ω—ë–º –≤–Ω—É—Ç—Ä–∏ ‚ù§Ô∏è",
    "üéâ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ï—â—ë –æ–¥–∏–Ω –≤–∏—Ç–æ–∫ –≤–æ–∫—Ä—É–≥ —Å–æ–ª–Ω—Ü–∞ üåç –ü—É—Å—Ç—å –≤–ø–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Ç—ë–ø–ª—ã—Ö –Ω–µ–¥–µ–ª—å, —á–µ–º –ø–æ–∑–∞–¥–∏ ‚ú®"
]

new_year_wishes = [
    "üéá –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ü—É—Å—Ç—å –≤—Å—ë –ø–ª–æ—Ö–æ–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –ø—Ä–æ—à–ª–æ–º, –∞ –≤–ø–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –º–µ—Å—Ç–æ –¥–ª—è –ª—ë–≥–∫–æ—Å—Ç–∏, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ —É—é—Ç–Ω—ã—Ö –≤–µ—á–µ—Ä–æ–≤ ‚ú®",
    "ü•Ç –° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –±—É–¥–µ—Ç –±–µ–∑ —Å—É–µ—Ç—ã ‚Äî —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ª—é–¥—å–º–∏, –≤–∫—É—Å–Ω–æ–π –µ–¥–æ–π –∏ –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ ‚ù§Ô∏è",
    "üåü –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ñ–µ–ª–∞—é, —á—Ç–æ–±—ã –º–µ—á—Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–±—ã–≤–∞–ª–∏—Å—å, –∞ —Å–∞–º–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ –¥–æ—Ä–æ–≥—É –∫ —Ç–µ–±–µ ‚úåÔ∏è",
    "üéÜ –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –±—É–¥–µ—Ç –∫–∞–∫ —Å–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö ‚Äî —á–∏—Å—Ç—ã–π, –±–æ–¥—Ä—è—â–∏–π –∏ –ø–æ–ª–Ω—ã–π –Ω–æ–≤—ã—Ö –∏–¥–µ–π üí° ü•Ç –° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º!",
    "üåü –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ü—É—Å—Ç—å –≤ —Å–µ—Ä–¥—Ü–µ –±—É–¥–µ—Ç —Å–≤–µ—Ç–ª–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞ –æ–∫–Ω–æ–º —Ç–µ–º–Ω–æ üí´",
    "üïØ –ü—É—Å—Ç—å –≤ —ç—Ç–æ–º –≥–æ–¥—É –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Å–≤–µ—Ç–∞ –≤ –¥–æ–º–µ –∏ –≤ –¥—É—à–µ, –º–≥–Ω–æ–≤–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—Ç—Å—è –∑–∞–ø–æ–º–Ω–∏—Ç—å, –∏ –ª—é–¥–µ–π, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–ø–æ–∫–æ–π–Ω–æ üåø –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º!üéÜ",
    "ü•Ç –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç —á—Ç–æ-—Ç–æ —Å–≤–æ—ë, —Å–≤–æ—é —Ä–∞–¥–æ—Å—Ç—å, —Å–≤–æ—ë –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏ –º–∞–ª–µ–Ω—å–∫—É—é –ø–æ–±–µ–¥—É üíõ –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º!üéÜ",
    "üîî –° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! –ü—É—Å—Ç—å –≤ –Ω–æ–≤–æ–º –≥–æ–¥—É –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Å–º–µ—Ö–∞, —Å–≤–µ—Ç–ª—ã—Ö –∏–¥–µ–π –∏ —É—é—Ç–Ω—ã—Ö –≤–µ—á–µ—Ä–æ–≤ —Å —Ç–µ–º–∏, –∫—Ç–æ –¥–æ—Ä–æ–≥ ‚ù§Ô∏è",
    "üéá –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ñ–µ–ª–∞—é –ª—ë–≥–∫–æ—Å—Ç–∏, –ø—Ä–∏—è—Ç–Ω—ã—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤ –∏ –ª—é–¥–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç–µ–ø–ª–æ –∏ —Å–ø–æ–∫–æ–π–Ω–æ üåÖ",
    "‚ú® –ü—É—Å—Ç—å –≤ —ç—Ç–æ–º –≥–æ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç –∫–∞–∫ –º–∞–ª–µ–Ω—å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞ –∏ —Å–Ω–æ–≤–∞ üòå"
]

# ---------- –ö–ê–†–¢–ò–ù–ö–ò ----------
def generate_life_weeks_image(birth_date, current_date, life_expectancy_years=80):
    total_weeks = life_expectancy_years * 52
    lived_weeks = (current_date - birth_date).days // 7

    cols, rows = 52, life_expectancy_years
    size, margin = 10, 2
    left_space, top_space = 35, 90

    img = Image.new("RGB", (cols * (size + margin) + left_space + 20, rows * (size + margin) + top_space + 20), "white")
    draw = ImageDraw.Draw(img)
    font = ImageFont.load_default()
    draw.text((10, 10), f"–ü—Ä–æ–∂–∏—Ç–æ: {lived_weeks} –Ω–µ–¥–µ–ª—å", fill="black", font=font)

    for i in range(total_weeks):
        x = left_space + (i % cols) * (size + margin)
        y = top_space + (i // cols) * (size + margin)
        color = (220, 20, 60) if i < lived_weeks else (230, 230, 230)
        draw.rectangle([x, y, x + size, y + size], fill=color)
    return img

# ---------- –û–°–ù–û–í–ù–´–ï –•–ï–ù–î–õ–ï–†–´ ----------
def main_reply_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–∏–∑–Ω—å –ø–æ –º–µ—Å—è—Ü–∞–º", "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏")
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup_inline = types.InlineKeyboardMarkup()
    for y in [70, 80, 90]:
        markup_inline.add(types.InlineKeyboardButton(f"{y} –ª–µ—Ç", callback_data=f"years_{y}"))
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –ø–æ –Ω–µ–¥–µ–ª—è–º.\n\n–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:",
        reply_markup=markup_inline
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("years_"))
def set_life_expectancy(call):
    years = int(call.data.split("_")[1])
    user_id = str(call.from_user.id)
    users.setdefault(user_id, {})
    users[user_id]["life_expectancy"] = years
    save_users(users)

    if "birth_date" in users[user_id]:
        birth_date = datetime.fromisoformat(users[user_id]["birth_date"]).date()
        img = generate_life_weeks_image(birth_date, date.today(), years)
        img.save("life.png")
        quote = random.choice(quotes)
        with open("life.png", "rb") as photo:
            bot.send_photo(call.message.chat.id, photo, caption=f"{quote}\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö üï∞", reply_markup=main_reply_keyboard())
    else:
        bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.MM.–ì–ì–ì–ì")

# ---------- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ----------
def check_weekly_updates():
    today = date.today()
    for user_id, info in users.items():
        if "birth_date" not in info: continue
        birth_date = datetime.fromisoformat(info["birth_date"]).date()
        weeks_lived = (today - birth_date).days // 7
        last_sent = info.get("last_sent_week", -1)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
        if today.day == birth_date.day and today.month == birth_date.month:
            bot.send_message(user_id, random.choice(birthday_wishes))
            info["last_sent_week"] = weeks_lived
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ù–æ–≤—ã–π –≥–æ–¥
        if today.day == 1 and today.month == 1:
            bot.send_message(user_id, random.choice(new_year_wishes))
            info["last_sent_week"] = weeks_lived
            continue

        # –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è
        if weeks_lived > last_sent:
            img = generate_life_weeks_image(birth_date, today, info.get("life_expectancy", 80))
            img.save("life.png")
            with open("life.png", "rb") as photo:
                bot.send_photo(user_id, photo, caption=f"–ï—â—ë –æ–¥–Ω–∞ –Ω–µ–¥–µ–ª—è –ø—Ä–æ—à–ª–∞ ‚úåÔ∏è\n\n{random.choice(quotes)}")
            info["last_sent_week"] = weeks_lived

    save_users(users)

# ---------- FLASK ----------
app = Flask(__name__)

@app.route('/', methods=['GET'])
def home():
    return "‚úÖ Bot is running!"

@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    WEBHOOK_URL = f"https://lifetimerbot.onrender.com/{BOT_TOKEN}"
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)

    scheduler = BackgroundScheduler()
    scheduler.add_job(check_weekly_updates, "interval", days=1)
    scheduler.start()

    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
