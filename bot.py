import telebot
from datetime import date, datetime
from dateutil.relativedelta import relativedelta
from PIL import Image, ImageDraw, ImageFont
import os, json, random, time
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
BOT_TOKEN = "8312401636:AAGfQXDN5v5in2d4jUHMZZdTJYt29TfF3I8"
DATA_FILE = "users.json"
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)

# ---------- –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï ----------
def load_users():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_users()
awaiting_birth_date_change = set()

# ---------- –°–ü–ò–°–ö–ò ----------
quotes = [
    "–ù–∞—à–∞ –∂–∏–∑–Ω—å ‚Äî —Ü–µ–ø–æ—á–∫–∞ –¥–Ω–µ–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è.",
    "–ö–∞–∂–¥–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –µ—â—ë –æ–¥–∏–Ω —à—Ç—Ä–∏—Ö —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏.",
    "–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è —É–∂–µ –∏—Å—Ç–æ—Ä–∏—è. –ù–æ–≤–∞—è ‚Äî –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö.",
    "–ñ–∏–∑–Ω—å –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –Ω–µ –≥–æ–¥–∞–º–∏, –∞ –º–æ–º–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å –º–µ–Ω—è—é—Ç.",
    "–ü–æ–∫–∞ —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ, —Ç—ã —É–∂–µ –ø—Ä–æ–∂–∏–ª –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ —á–∏—Å—Ç—ã–π –ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã —á–∞—Å—Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—à–∫–æ–π.",
    "–î–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç ‚Äî –∏–¥—ë—Ç –∂–∏–∑–Ω—å.",
]

birthday_messages = [
    "üéâ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ü–æ–±–æ–ª—å—à–µ —Å–æ–ª–Ω—Ü–∞, —Å–≤–æ–±–æ–¥—ã –∏ –ª—é–¥–µ–π, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —Å–ø–æ–∫–æ–π–Ω–æ ‚úåÔ∏è",
    "ü•≥ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ñ–µ–ª–∞—é, —á—Ç–æ–±—ã –º—É–∑—ã–∫–∞ –∑–≤—É—á–∞–ª–∞, –∏–¥–µ–∏ —Ä–æ–∂–¥–∞–ª–∏—Å—å, –∏ –≤—Å—ë —Å–∫–ª–∞–¥—ã–≤–∞–ª–æ—Å—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ üòå",
    "üåÖ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –ø—Ä–∏–Ω–µ—Å—ë—Ç –æ—â—É—â–µ–Ω–∏–µ, —á—Ç–æ –≤—Å—ë –∏–¥—ë—Ç –∫–∞–∫ –Ω–∞–¥–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–∫–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –∫—É–¥–∞ üôÇ",
    "üéà –ü—É—Å—Ç—å –±—É–¥–µ—Ç —Å–≤–µ—Ç–ª–æ, —Å–ø–æ–∫–æ–π–Ω–æ –∏ –ø–æ-—Å–≤–æ–µ–º—É –∫—Ä–∞—Å–∏–≤–æ.\n–ê –≤—Å—ë –Ω–µ–Ω—É–∂–Ω–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–∞–ª–∏—Ç—Å—è —Å–∞–º–æ —Å–æ–±–æ–π üí´",
    "üéâ –ï—â—ë –æ–¥–∏–Ω –≤–∏—Ç–æ–∫ –≤–æ–∫—Ä—É–≥ —Å–æ–ª–Ω—Ü–∞ üåç\n–ü—É—Å—Ç—å –≤–ø–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Ç—ë–ø–ª—ã—Ö –Ω–µ–¥–µ–ª—å, —á–µ–º –ø–æ–∑–∞–¥–∏ ‚ú®",
]

newyear_messages = [
    "üéá –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ü—É—Å—Ç—å –≤—Å—ë –ø–ª–æ—Ö–æ–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –ø—Ä–æ—à–ª–æ–º, –∞ –≤–ø–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –º–µ—Å—Ç–æ –¥–ª—è –ª—ë–≥–∫–æ—Å—Ç–∏, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ —É—é—Ç–Ω—ã—Ö –≤–µ—á–µ—Ä–æ–≤ ‚ú®",
    "ü•Ç –° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –±—É–¥–µ—Ç –±–µ–∑ —Å—É–µ—Ç—ã ‚Äî —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ª—é–¥—å–º–∏, –≤–∫—É—Å–Ω–æ–π –µ–¥–æ–π –∏ –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ ‚ù§Ô∏è",
    "üåü –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ñ–µ–ª–∞—é, —á—Ç–æ–±—ã –º–µ—á—Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–±—ã–≤–∞–ª–∏—Å—å, –∞ —Å–∞–º–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ –¥–æ—Ä–æ–≥—É –∫ —Ç–µ–±–µ ‚úåÔ∏è",
    "üåü –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ü—É—Å—Ç—å –≤ —Å–µ—Ä–¥—Ü–µ –±—É–¥–µ—Ç —Å–≤–µ—Ç–ª–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞ –æ–∫–Ω–æ–º —Ç–µ–º–Ω–æ üí´",
    "‚ú® –ü—É—Å—Ç—å –≤ —ç—Ç–æ–º –≥–æ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç –∫–∞–∫ –º–∞–ª–µ–Ω—å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞ –∏ —Å–Ω–æ–≤–∞ üòå",
]

weekly_phrases = [
    "–ï—â—ë –æ–¥–Ω–∞ –Ω–µ–¥–µ–ª—è –ø—Ä–æ—à–ª–∞ ‚úåÔ∏è",
    "–ü—Ä–æ—à–ª–∞ –Ω–µ–¥–µ–ª—è ‚Äî –∏ —ç—Ç–æ —É–∂–µ —á—Ç–æ-—Ç–æ.",
    "–ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—á—ë—Ç: –ø—Ä–æ—à–ª–∞ –µ—â—ë –æ–¥–Ω–∞ –Ω–µ–¥–µ–ª—è —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.",
    "–ù–∞–¥—ë–∂–Ω—ã–π —á–µ–∫: –Ω–µ–¥–µ–ª—è –ø—Ä–æ—à–ª–∞ ‚Äî –≤—Ä–µ–º—è –∏–¥—ë—Ç.",
]

# ---------- –ö–ê–†–¢–ò–ù–ö–ê ----------
def _load_font(size):
    try:
        return ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", size)
    except:
        return ImageFont.load_default()

def generate_life_weeks_image(birth_date, current_date, life_expectancy_years=80):
    total_weeks = life_expectancy_years * 52
    lived_weeks = (current_date - birth_date).days // 7
    lived_days = (current_date - birth_date).days

    cols, rows = 52, life_expectancy_years
    size, margin, left, top = 10, 2, 35, 90
    img_width = cols * (size + margin) + margin + left + 20
    img_height = rows * (size + margin) + margin + top + 20
    img = Image.new("RGB", (img_width, img_height), "white")
    draw = ImageDraw.Draw(img)

    font, title_font = _load_font(14), _load_font(18)
    draw.text((10, 10), f"–ü—Ä–æ–∂–∏—Ç–æ: {lived_weeks} –Ω–µ–¥–µ–ª—å ({lived_days} –¥–Ω–µ–π)", fill="black", font=title_font)
    remaining_weeks = max(total_weeks - lived_weeks, 0)
    remaining_days = (birth_date + relativedelta(weeks=total_weeks) - current_date).days
    draw.text((10, 36), f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining_weeks} –Ω–µ–¥–µ–ª—å ({remaining_days} –¥–Ω–µ–π)", fill="gray", font=font)

    for w in range(4, cols + 1, 4):
        draw.text((left + (w - 1) * (size + margin), top - 18), str(w), fill="gray", font=font)
    for y in range(rows):
        draw.text((10, top + y * (size + margin) + (size//2 - 6)), str(y + 1), fill="gray", font=font)
    for i in range(total_weeks):
        x = left + (i % cols) * (size + margin)
        y = top + (i // cols) * (size + margin)
        color = (220, 20, 60) if i < lived_weeks else (230, 230, 230)
        draw.rectangle([x, y, x + size, y + size], fill=color)
    return img

# ---------- –ö–õ–ê–í–ò–ê–¢–£–†–ê ----------
def main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", "–ñ–∏–∑–Ω—å –≤ –º–µ—Å—è—Ü–∞—Ö", "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏")
    return markup

# ---------- /START ----------
@bot.message_handler(commands=["start"])
def start(message):
    markup = types.InlineKeyboardMarkup()
    for y in [70, 80, 90]:
        markup.add(types.InlineKeyboardButton(f"{y} –ª–µ—Ç", callback_data=f"years_{y}"))
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:", reply_markup=markup)

# ---------- CALLBACK ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith("years_"))
def set_years(call):
    years = int(call.data.split("_")[1])
    uid = str(call.from_user.id)
    users.setdefault(uid, {})["life_expectancy"] = years
    save_users(users)
    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {years} –ª–µ—Ç")

    if "birth_date" in users[uid]:
        birth_date = datetime.fromisoformat(users[uid]["birth_date"]).date()
        img = generate_life_weeks_image(birth_date, date.today(), years)
        img.save("life.png")
        quote = random.choice(quotes)
        with open("life.png", "rb") as photo:
            bot.send_photo(call.message.chat.id, photo, caption=f"{quote}\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö üï∞", reply_markup=main_keyboard())
    else:
        bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.MM.–ì–ì–ì–ì")

# ---------- –°–û–û–ë–©–ï–ù–ò–Ø ----------
@bot.message_handler(func=lambda m: True)
def messages(m):
    uid, text = str(m.from_user.id), m.text.strip()

    if uid in awaiting_birth_date_change:
        try:
            new_date = datetime.strptime(text, "%d.%m.%Y").date()
            users.setdefault(uid, {})["birth_date"] = new_date.isoformat()
            lived_weeks = (date.today() - new_date).days // 7
            users[uid]["last_sent_week"] = lived_weeks
            save_users(users)
            awaiting_birth_date_change.remove(uid)
            img = generate_life_weeks_image(new_date, date.today(), users[uid].get("life_expectancy", 80))
            img.save("life.png")
            quote = random.choice(quotes)
            with open("life.png", "rb") as photo:
                bot.send_photo(m.chat.id, photo, caption=f"{quote}\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö üï∞", reply_markup=main_keyboard())
        except ValueError:
            bot.reply_to(m, "‚ö†Ô∏è –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì")
        return

    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è":
        awaiting_birth_date_change.add(uid)
        bot.send_message(m.chat.id, "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.MM.–ì–ì–ì–ì")
        return

    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏":
        markup = types.InlineKeyboardMarkup()
        for y in [70, 80, 90]:
            markup.add(types.InlineKeyboardButton(f"{y} –ª–µ—Ç", callback_data=f"years_{y}"))
        bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=markup)
        return

    # –ø–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    try:
        birth = datetime.strptime(text, "%d.%m.%Y").date()
        users.setdefault(uid, {})["birth_date"] = birth.isoformat()
        lived_weeks = (date.today() - birth).days // 7
        users[uid]["last_sent_week"] = lived_weeks
        save_users(users)
        img = generate_life_weeks_image(birth, date.today(), users[uid].get("life_expectancy", 80))
        img.save("life.png")
        quote = random.choice(quotes)
        with open("life.png", "rb") as photo:
            bot.send_photo(m.chat.id, photo, caption=f"{quote}\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö üï∞", reply_markup=main_keyboard())
    except ValueError:
        bot.reply_to(m, "‚ö†Ô∏è –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì")

# ---------- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ----------
def check_and_send_updates():
    today = date.today()
    for uid, info in list(users.items()):
        try:
            if "birth_date" not in info: continue
            bdate = datetime.fromisoformat(info["birth_date"]).date()
            years = info.get("life_expectancy", 80)

            # –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
            if bdate.month == today.month and bdate.day == today.day:
                bot.send_message(int(uid), random.choice(birthday_messages))
                continue

            # –ù–æ–≤—ã–π –≥–æ–¥
            if today.month == 1 and today.day == 1:
                bot.send_message(int(uid), random.choice(newyear_messages))
                continue

            # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            lived_weeks = (today - bdate).days // 7
            last = info.get("last_sent_week", lived_weeks)
            if lived_weeks > last:
                img = generate_life_weeks_image(bdate, today, years)
                img.save("life.png")
                caption = f"{random.choice(weekly_phrases)}\n\n{random.choice(quotes)}"
                with open("life.png", "rb") as photo:
                    bot.send_photo(int(uid), photo, caption=caption)
                users[uid]["last_sent_week"] = lived_weeks
                save_users(users)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–ª—è {uid}: {e}")

# ---------- –ó–ê–ü–£–°–ö ----------
scheduler = BackgroundScheduler()
scheduler.add_job(check_and_send_updates, "cron", hour=0, minute=0)
scheduler.start()

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling + scheduler)")
bot.polling(none_stop=True, interval=1)
