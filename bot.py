import telebot
from datetime import date, datetime
from PIL import Image, ImageDraw, ImageFont
import os
import json
from flask import Flask, request
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler
import random

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
BOT_TOKEN = "8312401636:AAGfQXDN5v5in2d4jUHMZZdTJYt29TfF3I8"
DATA_FILE = "users.json"
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)

# ---------- –°–ü–ò–°–û–ö –§–†–ê–ó ----------
quotes = [
    "–ù–∞—à–∞ –∂–∏–∑–Ω—å ‚Äî —Ü–µ–ø–æ—á–∫–∞ –¥–Ω–µ–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è.",
    "–í—Ä–µ–º—è –Ω–µ –∂–¥—ë—Ç, –Ω–æ –≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç —Ä—è–¥–æ–º.",
    "–ö–∞–∂–¥–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –µ—â—ë –æ–¥–∏–Ω —à—Ç—Ä–∏—Ö —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏.",
    "–ù–µ –ø—ã—Ç–∞–π—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è ‚Äî –Ω–∞–ø–æ–ª–Ω–∏ –µ–≥–æ —Å–º—ã—Å–ª–æ–º.",
    "–ñ–∏–∑–Ω—å –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –Ω–µ –≥–æ–¥–∞–º–∏, –∞ –º–æ–º–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å –º–µ–Ω—è—é—Ç.",
    "–°–µ–≥–æ–¥–Ω—è ‚Äî –Ω–∞—á–∞–ª–æ –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.",
    "–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è —É–∂–µ –∏—Å—Ç–æ—Ä–∏—è. –ù–æ–≤–∞—è ‚Äî –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö.",
    "–°–µ–∫—É–Ω–¥—ã –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –≥–æ–¥—ã ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏ –º–≥–Ω–æ–≤–µ–Ω–∏–µ.",
    "–ò–Ω–æ–≥–¥–∞ –≤—Ä–µ–º—è –ª–µ—Ç–∏—Ç, –∏–Ω–æ–≥–¥–∞ —Ç—è–Ω–µ—Ç—Å—è, –Ω–æ –æ–Ω–æ –≤—Å–µ–≥–¥–∞ —Ç–≤–æ—ë.",
    "–ü–æ–∫–∞ —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ, —Ç—ã —É–∂–µ –ø—Ä–æ–∂–∏–ª –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
    "–í—Å—ë –ø—Ä–æ–π–¥—ë—Ç ‚Äî –∏ —ç—Ç–æ —Ç–æ–∂–µ.",
    "–ú—ã –Ω–µ –∑–∞–º–µ—á–∞–µ–º, –∫–∞–∫ –¥–Ω–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –∂–∏–∑–Ω—å.",
    "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ ‚Äî —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
    "–¢–∏—à–∏–Ω–∞ —Ç–æ–∂–µ —Ç–µ—á—ë—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–∏.",
    "–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç, —á—Ç–æ ¬´–ø–æ—Ç–æ–º¬ª –Ω–∞—Å—Ç—É–ø–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ.",
    "–°–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ –Ω–∞ —Å–≤–µ—Ç–µ ‚Äî –≥–æ–¥—ã.",
    "–î–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç ‚Äî –∏–¥—ë—Ç –∂–∏–∑–Ω—å.",
    "–í—á–µ—Ä–∞—à–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–∏ —É–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—á–∞—Ç.",
    "–ë—É–¥—É—â–µ–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–∏—Ö–æ, —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ —á–∏—Å—Ç—ã–π –ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã —á–∞—Å—Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—à–∫–æ–π.",
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞...
]

# ---------- –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï ----------
def load_users():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_users()
awaiting_birth_date_change = set()  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è—é—Ç –¥–∞—Ç—É

# ---------- –°–û–ó–î–ê–ù–ò–ï –ö–ê–†–¢–ò–ù–û–ö ----------
def generate_life_weeks_image(birth_date, current_date, life_expectancy_years=80):
    total_weeks = life_expectancy_years * 52
    lived_weeks = (current_date - birth_date).days // 7
    lived_days = (current_date - birth_date).days

    cols = 52
    rows = life_expectancy_years
    size = 10
    margin = 2
    left_space = 35
    top_space = 90

    img_width = cols * (size + margin) + margin + left_space + 20
    img_height = rows * (size + margin) + margin + top_space + 20
    img = Image.new("RGB", (img_width, img_height), "white")
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 14)
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 18)
    except:
        font = ImageFont.load_default()
        title_font = ImageFont.load_default()

    draw.text((10, 10), f"–ü—Ä–æ–∂–∏—Ç–æ: {lived_weeks} –Ω–µ–¥–µ–ª—å ({lived_days} –¥–Ω–µ–π)", fill="black", font=title_font)
    remaining_weeks = total_weeks - lived_weeks
    remaining_days = remaining_weeks * 7
    draw.text((10, 40), f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining_weeks} –Ω–µ–¥–µ–ª—å ({remaining_days} –¥–Ω–µ–π)", fill="gray", font=font)

    for w in range(4, cols + 1, 4):
        x_pos = left_space + (w - 1) * (size + margin)
        draw.text((x_pos, top_space - 18), str(w), fill="gray", font=font)

    for y in range(rows):
        y_pos = top_space + y * (size + margin) - 2
        draw.text((10, y_pos), str(y + 1), fill="gray", font=font)

    for i in range(total_weeks):
        x = left_space + (i % cols) * (size + margin)
        y = top_space + (i // cols) * (size + margin)
        color = (220, 20, 60) if i < lived_weeks else (230, 230, 230)
        draw.rectangle([x, y, x + size, y + size], fill=color)

    return img

def generate_life_months_image(birth_date, current_date, life_expectancy_years=80):
    total_months = life_expectancy_years * 12
    lived_months = (current_date.year - birth_date.year) * 12 + (current_date.month - birth_date.month)
    remaining_months = total_months - lived_months

    cols = 12
    rows = life_expectancy_years
    size = 20
    margin = 3
    left_space = 35
    top_space = 50

    img_width = cols * (size + margin) + margin + left_space + 20
    img_height = rows * (size + margin) + margin + top_space + 20
    img = Image.new("RGB", (img_width, img_height), "white")
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 14)
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf", 18)
    except:
        font = ImageFont.load_default()
        title_font = ImageFont.load_default()

    draw.text((10, 10), f"–ü—Ä–æ–∂–∏—Ç–æ: {lived_months} –º–µ—Å—è—Ü–µ–≤", fill="black", font=title_font)
    draw.text((10, 40), f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining_months} –º–µ—Å—è—Ü–µ–≤", fill="gray", font=font)

    for m in range(1, 13):
        x_pos = left_space + (m - 1) * (size + margin)
        draw.text((x_pos, top_space - 20), str(m), fill="gray", font=font)

    for y in range(rows):
        y_pos = top_space + y * (size + margin)
        draw.text((10, y_pos), str(y + 1), fill="gray", font=font)

    for i in range(total_months):
        x = left_space + (i % cols) * (size + margin)
        y = top_space + (i // cols) * (size + margin)
        color = (220, 20, 60) if i < lived_months else (230, 230, 230)
        draw.rectangle([x, y, x + size, y + size], fill=color)

    return img

# ---------- –ú–ï–ù–Æ –ò –°–¢–ê–†–¢ ----------
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if user_id not in users or "birth_date" not in users[user_id]:
        for years in [70, 80, 90]:
            markup.add(types.InlineKeyboardButton(f"{years} –ª–µ—Ç", callback_data=f"years_{years}"))
        bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:", reply_markup=markup)
    else:
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="change_date"))
        markup.add(types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ –º–µ—Å—è—Ü–∞–º", callback_data="months_table"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ----------
@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    user_id = str(call.from_user.id)

    if call.data.startswith("years_"):
        years = int(call.data.split("_")[1])
        if user_id not in users:
            users[user_id] = {}
        users[user_id]["life_expectancy"] = years
        save_users(users)
        bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {years} –ª–µ—Ç")
        bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.MM.–ì–ì–ì–ì")

    elif call.data == "change_date":
        awaiting_birth_date_change.add(user_id)
        bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.MM.–ì–ì–ì–ì")

    elif call.data == "months_table":
        if user_id in users and "birth_date" in users[user_id]:
            birth_date = datetime.fromisoformat(users[user_id]["birth_date"]).date()
            years = users[user_id].get("life_expectancy", 80)
            img = generate_life_months_image(birth_date, date.today(), years)
            img.save("life_months.png")
            with open("life_months.png", "rb") as photo:
                bot.send_photo(call.message.chat.id, photo, caption=f"–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –ø–æ –º–µ—Å—è—Ü–∞–º (–¥–æ {years} –ª–µ—Ç) üï∞")

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ----------
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = str(message.from_user.id)

    if user_id in awaiting_birth_date_change:
        try:
            new_birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
            if user_id not in users:
                users[user_id] = {}
            users[user_id]["birth_date"] = new_birth_date.isoformat()
            save_users(users)
            awaiting_birth_date_change.remove(user_id)
            bot.send_message(message.chat.id, f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {message.text}")

            years = users[user_id].get("life_expectancy", 80)
            img = generate_life_weeks_image(new_birth_date, date.today(), years)
            img.save("life.png")
            with open("life.png", "rb") as photo:
                bot.send_photo(message.chat.id, photo, caption=f"–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö (–¥–æ {years} –ª–µ—Ç) üï∞")
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì")
    else:
        try:
            birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
            years = users.get(user_id, {}).get("life_expectancy", 80)
            if user_id not in users:
                users[user_id] = {}
            users[user_id]["birth_date"] = birth_date.isoformat()
            save_users(users)

            img = generate_life_weeks_image(birth_date, date.today(), years)
            img.save("life.png")
            quote = random.choice(quotes)
            with open("life.png", "rb") as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption=f"{quote}\n\n–í–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö (–¥–æ {years} –ª–µ—Ç) üï∞"
                )
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì")

# ---------- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ----------
def send_weekly_updates():
    today = date.today()
    print("üîî –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞", datetime.now())
    for user_id, info in users.items():
        try:
            if "birth_date" in info:
                birth_date = date.fromisoformat(info["birth_date"])
                years = info.get("life_expectancy", 80)
                img = generate_life_weeks_image(birth_date, today, years)
                img.save("life.png")
                quote = random.choice(quotes)
                try:
                    with open("life.png", "rb") as photo:
                        bot.send_photo(user_id, photo, caption=f"{quote}\n\n–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞ {today.strftime('%d.%m.%Y')} ‚ú®")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª—è {user_id}: {e}")

scheduler = BackgroundScheduler()
scheduler.add_job(send_weekly_updates, 'cron', day_of_week='mon', hour=10, minute=0)
scheduler.start()

# ---------- FLASK ----------
app = Flask(__name__)

@app.route('/', methods=['GET'])
def home():
    return "‚úÖ Bot is running and Flask server is alive!"

@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

if __name__ == "__main__":
    WEBHOOK_URL = f"https://lifetimerbot.onrender.com/{BOT_TOKEN}"
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)

    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
